#!/bin/bash

#= Generic image (VIM1 VIM2 VIM3 VIM3L Edge) EXPERIMENTAL

SUPPORTED_LINUX=("mainline")
SUPPORTED_LINUX_DESC=("Linux Mainline")

Ubuntu_RELEASE_ARRAY=("bionic" "focal" "hirsute")
Debian_RELEASE_ARRAY=("buster" "bullseye")

Ubuntu_TYPE_ARRAY=("minimal")
Ubuntu_TYPE_ARRAY_DESC=("Minimal Image With Very Basic Packages" )
Debian_TYPE_ARRAY=("minimal")
Debian_TYPE_ARRAY_DESC=("Minimal Image With Very Basic Packages" )

case "$LINUX" in
	mainline)
		KERNEL_COMPILER="aarch64-none-linux-gnu-"
		KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-arm-aarch64-none-linux-gnu/bin"
		LINUX_DTB=""
		LINUX_DIR="$BUILD/linux-mainline-*"
		LINUX_GIT_BRANCH="master"
		LINUX_DEFCONFIG="${LINUX_DEFCONFIG:-defconfig}"
		SERIALCON=""
		BOOT_SCRIPT_BOARD=""
		GPU_VER=""
		GPU_PLATFORM=""
		MODESETTING_CONF=""
		;;
esac

BOOT_SCRIPT_VENDOR=""

BOOT_INI=""
BOOT_ENV_FILE=""
BOOT_ENV_FILE_EXT=""

CPUMIN=""
CPUMAX=""
GOVERNOR=""

####
WIFI_MODEL=""
GPU_MODEL=""

KERNEL_INSTALL="$BUILD"/linux-mainline-install

#[ -e "$KERNEL_INSTALL.ok" ] && \
NO_BUILD_LINUX=1

NO_BUILD_UBOOT=1

# Essential packages
PACKAGE_LIST="
	lsb-release
	openssh-server curl wget net-tools \
	cpufrequtils fake-hwclock \
	dialog ncurses-term nano bash-completion \
	figlet toilet \
	usbutils \
	debconf-utils \
"

PACKAGE_LIST=$(echo $PACKAGE_LIST)

# rsync
# sysfsutils
# watchdog

POST_SCRIPT=scripts/chroot-scripts/POST-CONFIG.sh

[ "$POST_CMD" ] || {
	POST_CMD="setup hello default"
	export POST_CMD
}

##############################

CMD_(){
	echo "# $@"
	$@
}

## Pack image
pack_image_platform_raw() {
	:
}

## Pack image
pack_image_platform() {
	info_msg "Image install type: Generic"
	IMG=$BUILD_IMAGES/$IMAGE_FILE_NAME
	info_msg "IMAGE: ${GREEN}$IMG${ENDCOLOR} is ready!"
	ls -l1 $IMG
	file $IMG
}

install_common_() {
	echo "[install_common_]"
	:
}

install_distribution_specific_() {
	echo "[install_distribution_specific_]"
	:
}

## tweaks for platform
tweaks_platform() {
	:
}


install_custom() {

	echo "[${FUNCNAME[0]}] "
	echo "[${FUNCNAME[0]}] KERNEL $KERNEL_INSTALL"
	cd $ROOT

	(
	[ -e $KERNEL_INSTALL.ok ] || {
	rm -rf $KERNEL_INSTALL.ok
	KERNEL_MAKE_ARGS="dtbs dtbs_install Image modules install modules_install"
	#KERNEL_MAKE_ARGS="dtbs_install install modules_install"
	if [ "$SUDO_USER" ]; then
	export KERNEL_MAKE_ARGS
	sudo -E -u $SUDO_USER scripts/build.sh linux
	sudo -u $SUDO_USER touch $KERNEL_INSTALL.ok
	else
	build_linux
	touch $KERNEL_INSTALL.ok
	fi
	}
	)

	rsync="rsync --chown=root:root"
	#rsync="rsync -aHWXh"

	CMD_ rsync -av --exclude=\*.old $KERNEL_INSTALL/boot $ROOTFS_TEMP
	CMD_ $rsync -a  $KERNEL_INSTALL/lib/* $ROOTFS_TEMP/lib

	CMD_ mkdir $ROOTFS_TEMP/boot/efi

	CUSTOM_FILES=archives/filesystem/special/Generic

	echo "[${FUNCNAME[0]}] FILES $CUSTOM_FILES"

	CMD_ $rsync -av  $CUSTOM_FILES/ \
		$ROOTFS_TEMP

	CMD_ $rsync -av \
		archives/hwpacks/wlan-firmware/* \
		$ROOTFS_TEMP/lib/firmware

	[ "$ROOTFS_UUID" ] || \
	ROOTFS_UUID=$(uuidgen -t)

	[ "$BOOT_UUID" ] || \
	BOOT_UUID=$(printf %04X-%04X $RANDOM $RANDOM)

	export ROOTFS_UUID
	export BOOT_UUID

	echo "[${FUNCNAME[0]}] ROOTFS_UUID: $ROOTFS_UUID BOOT_UUID: $BOOT_UUID"

        #SSH_KEYS=-:~/.ssh/id_ed25519.pub
	#export SSH_PUBS="user:pub_key_data"
	# need to improve
	# need more checks
	for s in $SSH_KEYS; do
	    user=${s%%:*}
	    key=${s#*:}
	    [ -e "$key" ] || {
		echo "[i] keys $key skipped ..."
		continue
	    }
	    key_data=$(grep -m1 @ $key)
	    SSH_PUBS="$SSH_PUBS $user:${key_data// /!}"
	done

	[ ! "$SSH_PUBS" ] || {
	echo "[i] SSH_PUBS: $SSH_PUBS"
	export SSH_PUBS
	}

}

# Build deb packages for platform
build_deb_packages_platform() {
	:
}

# Install deb packages for platform
install_deb_packages_platform() {
	:
}

prepare_partitions_() {

##
## no root no mount - easy and safe
##

## OTHER stuff

	# sync back kernel install
	CHOWN_="--chown=$SUDO_USER:"

	rsync -av $CHOWN $ROOTFS_TEMP/boot/init* \
		$KERNEL_INSTALL/boot

## make parts

	[ "$IMAGE_SIZE" ] || \
		IMAGE_SIZE=$((5*1024))

	IMG="$BUILD_IMAGES/$IMAGE_FILE_NAME"

	CFG=$ROOT/config/boards/Generic

	echo "[prepare_partitions_] $IMG IMAGE_SIZE: $IMAGE_SIZE"
	rm -rf "$IMG"
	dd if=/dev/zero of="$IMG" bs=1M count=0 seek=$IMAGE_SIZE
	sfdisk "$IMG" < $CFG/parts
	sync

	l1=
	l2=
	o1=
	o2=

	loop_setup(){
		echo "loop setup $@"
		o1=$1
		o2=$3
		l1=-
		l2=$BUILD_IMAGES/root.img
	#	l1=$(losetup -f --show -o $(($1*512)) --sizelimit=$(($2*512)) "$IMG")
	#	l2=$(losetup -f --show -o $(($3*512)) --sizelimit=$(($4*512)) "$IMG")
	}

	IMG_INFO=$(sfdisk -l "$IMG" -o start,end -q | tail +2)

	loop_setup $IMG_INFO
	CMD_ truncate -s$((o2*512)) $IMG

	echo "l1 $l1 l2 $l2"

## BOOT FS

	[ "$BOOT_LABEL" ] || \
		BOOT_LABEL=BOOT

	[ "$BOOT_SIZE" ] || \
		BOOT_SIZE=512

#   CMD_ mkfs.vfat -I -F32 -i ${BOOT_UUID//-/} -n $BOOT_LABEL $l1

	FR="$IMG@@$(($o1*512))"
	HEADS=4
	TRACKS=32
	SECTORS=$((BOOT_SIZE*1024*1024/512/HEADS/TRACKS))
	CMD_ mformat -v "$BOOT_LABEL" -N ${BOOT_UUID//-/} -i "$FR" \
		-h $HEADS -t $TRACKS -s $SECTORS

	[ "$BOOT_SRC" ] || \
		BOOT_SRC="UUID=$BOOT_UUID"
	#	BOOT_SRC="LABEL=$BOOT_LABEL"

	# copy boot files to fat
	(
	cd $ROOTFS_TEMP/boot
	CMD_ mcopy -sp -i $FR $(ls --group-directories-first .) ::
	CMD_ mdir -i $FR ::
	)

## ROOT_FS

	[ "$ROOTFS_LABEL" ] || \
		ROOTFS_LABEL=ROOTFS

	[ "$ROOTFS_OPTS" ] || \
		ROOTFS_OPTS="-m 2 -O ^64bit,^metadata_csum"

	[ "$ROOTFS_SIZE" ] || \
		ROOTFS_SIZE=1200M

	[ "$ROOTFS_SRC" ] || \
		ROOTFS_SRC="UUID=$ROOTFS_UUID"
	#	ROOTFS_SRC="LABEL=$ROOTFS_LABEL"

	echo "
$ROOTFS_SRC / auto errors=remount-ro 0 1
$BOOT_SRC /boot auto defaults 0 0
/boot /boot/efi none defaults,bind 0 0
tmpfs /tmp tmpfs size=50%,defaults,noatime,nosuid 0 0
" | tee $ROOTFS_TEMP/etc/fstab

	# clean rootfs from temp files
	( cd $ROOTFS_TEMP | exit 1
	CMD_ rm -rf boot/* tmp/*
	) || exit 2

	[ "$ROOTFS_UUID" ] && \
		ROOTFS_UUID_="-U$ROOTFS_UUID"

	CMD_ mkfs.ext4 -v -q -F $ROOTFS_UUID_ -L $ROOTFS_LABEL $ROOTFS_OPTS \
		-d $ROOTFS_TEMP $l2 $ROOTFS_SIZE

	#[ "$ROOTFS_UUID" ] || \
	#	ROOTFS_UUID=$(blkid -s UUID -o value $l2)

	CMD_ e2ls $l2

	#CMD_ e2fsck -f $l2
	#CMD_ resize2fs $l2 $ROOTFS_SIZE

## LAST STAGE

	for ROOTFS_SZ in $(du -b $l2); do break; done

	IMG_SIZE=$((o2*512+ROOTFS_SZ))
	echo "wait...."
	#CMD_ zerofree -v $l2
	file $l2
	dd bs=1M if=$l2 >> $IMG
	rm $l2
	CMD_ truncate -s$IMG_SIZE $IMG

## DONE

}

build_linux_debs_() {
	echo "[build_linux_deb_]"
	# Build linux debs
	info_msg "Build linux debs... skipped"
}
